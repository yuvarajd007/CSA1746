from collections import deque

def bfs(start, goal):
    queue = deque([start])
    visited = set()
    parent = {tuple(start): None}
    while queue:
        state = queue.popleft()
        if state == goal:
            path = []
            while state:
                path.append(state)
                state = parent[tuple(state)]
            return path[::-1]
        visited.add(tuple(state))
        zero = state.index(0)
        moves = [-3,3,-1,1]  # up, down, left, right
        for m in moves:
            new_zero = zero + m
            if 0 <= new_zero < 9 and (m not in [-1,1] or zero//3 == new_zero//3):
                new_state = state[:]
                new_state[zero], new_state[new_zero] = new_state[new_zero], new_state[zero]
                if tuple(new_state) not in visited:
                    queue.append(new_state)
                    parent[tuple(new_state)] = state

start = [1,2,3,4,0,5,6,7,8]
goal = [1,2,3,4,5,0,6,7,8]
path = bfs(start, goal)
for step in path:
    print(step)

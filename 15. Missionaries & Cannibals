from collections import deque
def valid(m,c):
    return 0<=m<=3 and 0<=c<=3 and (m==0 or m>=c) and (3-m==0 or 3-m>=3-c)
def solve():
    start=(3,3,1);goal=(0,0,0)
    queue=deque([(start,[])])
    visited=set()
    while queue:
        state,path=queue.popleft()
        if state==goal: 
            for p in path+[state]: print(p)
            return
        if state in visited: continue
        visited.add(state)
        m,c,b=state
        for dm,dc in [(1,0),(0,1),(1,1),(2,0),(0,2)]:
            ns=(m-dm,c-dc,0) if b else (m+dm,c+dc,1)
            if valid(ns): queue.append((ns,path+[state]))
solve()
